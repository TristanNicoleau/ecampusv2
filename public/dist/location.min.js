// Création des modules principaux
angular.module('location.controllers', ['ui.bootstrap']);
angular.module('location.services', ['ngResource']);
angular.module('location.directives', []);
angular.module('location.filters', []);

// Module principal
var app = angular.module('location', [
    'ngCookies',
    'ngRoute',
    'location.controllers',
    'location.services',
    'location.directives',
    'location.filters'
]);

// ============================== ROUTES ==============================
app.config(function ($routeProvider, $httpProvider) {

    $routeProvider
        .when('/', {
            redirectTo: '/home'
        })
        .when('/login', {
            templateUrl: 'views/login.html',
            controller: 'AuthCtrl'
        })
        .when('/account', {
            templateUrl: 'views/account.html',
            controller: 'UserCtrl'
        })
        .when('/profile', {
            templateUrl: 'views/fragment/profile.html',
            restricted: true
        })
        .when('/home', {
            templateUrl: 'views/fragment/home.html',
            restricted: true
        })
        .when('/plugs', {
            templateUrl: 'views/fragment/plugs.html',
            controller: 'RemotePlugCtrl',
            restricted: true
        })
        .when('/diagram', {
            templateUrl: 'views/fragment/diagram.html',
            restricted: true
        })
        .when('/error', {
            templateUrl: 'views/error.html'
        })
        .when('/clock', {
            templateUrl: 'views/fragment/clock.html',
            restrited: true
        });

    $httpProvider.interceptors.push(function ($location, $q) {
        return {
            responseError: function (rejection) {
                if (rejection.status === 401) {
                    // TODO Denied page
                    $location.path('/login');
                }
                return $q.reject(rejection);
            }
        };
    });

    // $locationProvider.html5Mode(true);
});

// ============================= STARTUP ===============================
app.run(function ($rootScope, $location, $cookies, AccessService, UserService) {
    if (!$cookies.id) {
        $location.path('/login');
    } else {
        UserService.get({
            id: $cookies.id
        }, function (user) {
            AccessService.user = user;
            delete $cookies.id;
        });
    }

    // Check if user is connected
    $rootScope.$on('$routeChangeStart', function (event, next) {
        if (next.restricted && !$cookies.id && !AccessService.user) {
            event.preventDefault();
            // TODO Page denied
            $location.path('/login');
        }
    });
});;// ----- AUTHENTICATION CONTROLLER (login, logout) -----
controllers.controller('AuthCtrl', ['$scope', '$location', 'AuthService', 'AccessService',
    function($scope, $location, Auth, accessService) {

        $scope.login = function() {
            var auth = new Auth($scope.auth);
            auth.password = CryptoJS.SHA3(auth.password).toString();
            auth.$login(function(res) {
                if (res.result) {
                    accessService.user = res.user;
                    $location.path('/home');
                } else {
                    $scope.$broadcast("modal", {
                        type: 'error',
                        title: 'Erreur d\'authentification',
                        message: 'Les identifiants et mots de passe que vous avez saisi ne sont pas valides.'
                    });
                }
            });
        };

        $scope.logout = function() {
            Auth.logout(function(res) {
                if (res.result) {
                    delete accessService.user;
                    $location.path('/');
                } else {
                    alert('Echec lors de la déconnexion');
                }
            });
        };

    }
]);;// ----- GLOBAL CONTROLLER (highest scope level $scope) -----
angular.module('location.controllers').controller('GlobalCtrl', function ($scope, accessService) {

    // Watching changes on accessService.user
    $scope.$watch(function () {
        return accessService.user;
    }, function (user) {
        $scope.user = user;
    });

});;// Please note that $modalInstance represents a modal window (instance) dependency.
// It is not the same as the $modal service used above.
var ModalInstanceCtrl = function ($scope, $modalInstance, $location) {

    $scope.end = function () {
        $modalInstance.close();
    };

    $scope.cancel = function () {
        $modalInstance.dismiss();
    };

    $scope.redirect = function (page) {
        console.log('redirect');
        $modalInstance.close();
        $location.path(page);
    };

};

var ModalCtrl = function ($scope, $modal) {

    // $scope.items = ['item1', 'item2', 'item3'];
    $scope.$on("modal", function (event, args) {
        // console.log(args);
        $scope.title = args.title;
        $scope.message = args.message;
        $modal.open({
            templateUrl: args.type + '.html',
            scope: $scope,
            controller: ModalInstanceCtrl
        });
    });

    $scope.open = function (title) {
        $modal.open({
            templateUrl: title + '.html',
            controller: ModalInstanceCtrl
        });
    };
};;// ----- DEVICE CONTROLLER -----
angular.module('location.controllers').controller('DeviceCtrl', function ($scope, $modal) {

    $scope.addDevice = function () {
        console.log($scope.newDevice);
        $scope.user.remotePlugs[$scope.selectedPlug].devices.push($scope.newDevice);
        /*update(function () {
            console.log($scope.user);
            $scope.newDevice = {};
        });*/
    };

    $scope.removeDevice = function (device) {
        $scope.user.remotePlugs[$scope.selectedPlug].devices.splice($scope.user.remotePlugs[$scope.selectedPlug].devices.indexOf(device), 1);
        //update();
    };

    $scope.modalPlugDevices = function (remotePlug) {
        $scope.selectedPlug = $scope.user.remotePlugs.indexOf(remotePlug);
        $scope.newDevice = {};
        $modal.open({
            templateUrl: 'devices.html',
            scope: $scope,
            controller: ModalInstanceCtrl
        });
        // Faire le cancel
    };
});;// ----- REMOTEPLUG CONTROLLER -----
angular.module('location.controllers').controller('RemotePlugCtrl', function ($scope, $modal, RemotePlug) {

    var internal = {
        getNewPlugNumber: function () {
            return $scope.plug.checked1 + $scope.plug.checked2 + $scope.plug.checked3 + $scope.plug.checked4 + $scope.plug.checked5 + $scope.plug.checkedA + $scope.plug.checkedB + $scope.plug.checkedC + $scope.plug.checkedD;
        },

        initPlugNumber: function () {
            $scope.plug = {
                checked1: "0",
                checked2: "0",
                checked3: "0",
                checked4: "0",
                checked5: "0",
                checkedA: "0",
                checkedB: "0",
                checkedC: "0",
                checkedD: "0"
            };
        }
    };

    $scope.remotePlugs = RemotePlug;
    $scope.create = function () {
        $scope.plug = {
            plugNumber: internal.getNewPlugNumber(),
            place: $scope.plug.place,
            status: 'OFF',
            active: false
        };

        /*var remotePlug = new RemotePlug($scope.plug);
remotePlug.$save(function(remotePlug){
$scope.user.remotePlugs.push(remotePlug);
$scope.modal.close(true, function(){
console.log("test");
});
});*/
    };

    $scope.delete = function (remotePlug) {
        RemotePlug.delete({
            'id': remotePlug._id
        }, function (res) {
            if (res) {
                $scope.user.remotePlugs.splice($scope.user.remotePlugs.indexOf(remotePlug), 1);
                console.log($scope.modal);
                $scope.modal.close(true);
            }
        });
    };

    // $scope.switch = function(remotePlug){
    //   console.log(remotePlug);
    // };

    $scope.remotePlugModal = function () {
        internal.initPlugNumber();
        $scope.modal = $modal.open({
            templateUrl: 'add.html',
            scope: $scope
        });
    };

    $scope.deleteModal = function (remotePlug) {
        $scope.modal = $modal.open({
            templateUrl: 'remove.html',
            controller: ModalInstanceCtrl
        });

        $scope.modal.result.then(function () {
            console.log('suppression');
            $scope.delete(remotePlug);
        }, function () {
            console.log('annulation');
        });
    };

    // $scope.selectArc = function(){
    //   console.log('test arc');
    // }

});;// ----- SLOT CONTROLLER -----
//angular.module('location.controllers').controller('SlotCtrl', function ($scope, $modal, Slot) {

  // $scope.addModal = function(remotePlug){
  //   $scope.selectedPlug = $scope.user.remotePlugs.indexOf(remotePlug);
  //   var modalInstance = $modal.open({
  //     templateUrl: 'slot.html',
  //     scope: $scope,
  //     controller: ModalInstanceCtrl
  //   });

  //   modalInstance.result.then(function (end) {
  //     console.log('modification du statut');
  //     update();
  //   }, function () {
  //     console.log('annulation de la modification du statut');
  //   });
  // };

//});;// ----- AUTHENTICATION CONTROLLER (login, logout) -----
angular.module('location.controllers').controller('AuthCtrl', function ($scope, $location, $window, Auth, accessService) {

    $scope.login = function () {
        var auth = new Auth($scope.auth);
        auth.password = CryptoJS.SHA3(auth.password).toString();
        auth.$login(function (res) {
            if (res.result) {
                accessService.user = res.user;
                $location.path('/home');
            } else {
                $scope.$broadcast("modal", {
                    type: 'error',
                    title: 'Erreur d\'authentification',
                    message: 'Les identifiants et mots de passe que vous avez saisi ne sont pas valides.'
                });
            }
        });
    };

    $scope.logout = function () {
        Auth.logout(function (res) {
            if (res.result) {
                delete accessService.user;
                $location.path('/');
            } else {
                $window.alert('Echec lors de la déconnexion');
            }
        });
    };

});;// ----- USER CONTROLLER (create, update, addPlug, removePlug) -----
angular.module('location.controllers').controller('UserCtrl', function ($scope, UserService) {

    $scope.create = function () {
        if ($scope.user.password !== $scope.confirmPassword) {
            $scope.$broadcast("modal", {
                type: 'error',
                title: 'Erreur de saisie',
                message: 'Les mots de passe que vous avez saisi sont différents'
            });
        } else {
            var user = new UserService($scope.user);
            user.password = CryptoJS.SHA3(user.password).toString();
            console.log(user);
            user.$save(function (res) {
                if (res.result) {
                    $scope.$broadcast("modal", {
                        type: 'success',
                        title: 'Compte créé avec succès',
                        message: 'Votre compte a été créé avec succès ! Vous pouvez vous connecter dès à présent'
                    });
                } else {
                    $scope.$broadcast("modal", {
                        type: 'error',
                        title: 'Problème rencontré lors de la création du compte',
                        message: 'Une erreur interne est survenue lors de la création de votre compte. Veuillez réessayer utlérieurement.'
                    });
                }
            });
        }
    };

    $scope.update = function (callback) {
        $scope.user.$update({
            id: $scope.user._id
        }, function (res) {
            if (res.result) {
                console.log('Utilisateur mis à jour' + res.user);
                $scope.user = new UserService(res.user);
                if (callback && typeof callback === "function") {
                    callback();
                }
            } else {
                $scope.$broadcast("modal", {
                    type: 'error',
                    title: 'Problème rencontré lors du traitement',
                    message: 'Une erreur interne est survenue lors de la mise à jour. Veuillez réessayer utlérieurement.'
                });
            }
        });
    };
});;// ----- USERLIST CONTROLLER (load the whole user list in $scope) -----
angular.module('location.controllers').controller('UserListCtrl', function ($scope, UserService) {

    $scope.users = UserService.query();

});;/*global Raphael*/

angular.module('location.directives').directive('clock', function ($window) {

    var clock = {
        // Fonction d'affichage des heures
        displayHours: function () {
            var degree, x, y, i, point;
            for (i = 1; i <= 24; i++) {
                degree = clock.timeToDegree(i, 0);
                point = clock.polarToCarthesian(clock.radius, degree);

                x = clock.center.x + point.x;
                y = clock.center.y - point.y;

                clock.r.text(x, y, i).attr({
                    font: clock.fontSize + ' Arial',
                    fill: '#000'
                }).toFront();
            }
        },
        timeToDegree: function (hours, minutes) {
            return (450 - ((hours % 24) * 60 + minutes) / 4) % 360;
        },
        polarToCarthesian: function (radius, angle) {
            return {
                x: radius * Math.cos(angle * Math.PI / 180),
                y: radius * Math.sin(angle * Math.PI / 180)
            };
        },
        arc: function (start, duration, radius) {
            var startAngle, endAngle;
            startAngle = clock.timeToDegree(start.getHours(), start.getMinutes());
            endAngle = clock.timeToDegree(start.getHours(), start.getMinutes() + Number.parseInt(duration));

            var point = clock.polarToCarthesian(radius, startAngle);

            var sx = clock.center.x + point.x;
            var sy = clock.center.y - point.y;

            point = clock.polarToCarthesian(radius, endAngle);

            var x = clock.center.x + point.x;
            var y = clock.center.y - point.y;

            var path = [
                    ['M', sx, sy],
                    ['A', radius, radius, 0, +((startAngle - endAngle) > 180), 1, x, y]
                ];
            return {
                path: path
            };
        },
        animations: {
            mouseover: function () {
                this.animate({
                    'stroke-width': clock.arcWidth * 1.10,
                    opacity: 0.80
                }, 400, 'bounce');
                if (Raphael.type !== 'VML') { //solves IE problem
                    this.toFront();
                }
            },
            mouseout: function () {
                this.stop().animate({
                    'stroke-width': clock.arcWidth * 0.85,
                    opacity: 1
                }, 400, 'elastic');
            }
        },
        diagram: function () {
            var i, j, len, lenj, item, timeslot, arc;

            clock.r.circle(clock.center.x, clock.center.y, clock.radius).attr({
                stroke: 'none',
                fill: '#fff'
            });

            clock.displayHours();

            var debugArc = function () {
                $window.alert('id :' + item.id + '\nslot : ' + JSON.stringify(timeslot));
            };

            for (i = 0, len = clock.data.length; i < len; i++) {
                item = clock.data[i];
                for (j = 0, lenj = item.timeslots.length; j < lenj; j++) {
                    timeslot = item.timeslots[j];
                    arc = clock.r.path().attr({
                        arc: [timeslot.startTime, timeslot.duration, clock.radius + (i + 0.8) * clock.arcWidth],
                        stroke: item.color,
                        'stroke-width': (clock.arcWidth * 0.85) + 'px'
                    });

                    if (clock.animate) {
                        arc.mouseover(clock.animations.mouseover).mouseout(clock.animations.mouseout);
                    }

                    if (clock.debug) {
                        arc.click(debugArc());
                        // TODO : Dégager
                    }

                }
            }
        }
    };

    return {
        restrict: 'E',
        scope: {
            dataProvider: '&dataProvider'
        },
        template: '<div class="clock"></div>',
        replace: true,
        link: function ($scope, $element, $attrs) {

            if (clock.data) {
                clock.data = $scope.dataProvider();
                clock.side = $element[0].clientWidth;
                clock.fontSize = '9px';

                clock.r = new Raphael($element[0], clock.side, clock.side);
                clock.r.customAttributes.arc = clock.arc;
                clock.radius = clock.side / 6;
                clock.center = {
                    x: clock.side / 2,
                    y: clock.side / 2
                };
                clock.arcWidth = (clock.side / 2 - clock.radius) / (clock.data.length + 0.5);

                clock.debug = $attrs.debug ? true : false;
                clock.animate = $attrs.animate ? true : false;

                clock.diagram();
            }
        }
    };
});;// Service global de l'application (création du scope global contenant l'objet user)
angular.module('location.services').factory('AccessService', function () {
    var accessService = {};
    accessService.user = null;
    return accessService;
});;// Service permettant les actions de login et logout
angular.module('location.services').factory('AuthService', function ($resource, ServerSettings) {
    return $resource(ServerSettings.path() + '/auth', {}, {
        login: {
            method: 'POST'
        },
        logout: {
            method: 'GET'
        }
    });
});;angular.module('location.services').factory('ServerSettings', function () {
    var settings = {
        protocol: 'http://',
        hostname: 'localhost',
        port: 9090,
        apiRoot: '/api',
        path: function () {
            return settings.protocol + settings.hostname + ':' + settings.port + settings.apiRoot;
        }
    };

    return settings;
});;// TODO;// Service permettant les actions CRUD sur les RemotePlugs
angular.module('location.services').factory('RemotePlugService', function ($resource, ServerSettings) {
    return $resource(ServerSettings.path() + '/remote/:id', {
        id: '@id'
    }, {
        update: {
            method: 'PUT',
            params: {
                id: '@id'
            }
        }
    });
});;// TODO;// Service permettant les actions CRUD sur le User
angular.module('location.services').factory('UserService', function ($resource, ServerSettings) {
    return $resource(ServerSettings.path() + '/user/:id', {
        id: '@id'
    }, {
        update: {
            method: 'PUT',
            params: {
                id: '@id'
            }
        }
    });
});